-- This query is created with the aim of filtering dates and zones which do not complain with the number of tickets desired.
config {
  type: "table",
  description: "This table contains the training dataset for modeling parking demand and availability. It includes detailed metrics such as average and standard deviation of tickets issued at various temporal granularities (hourly, daily, weekly) and median ticket counts. These metrics are computed per parking zone and are filtered to include only zones with significant ticket issuance, making the dataset pertinent for predictive modeling.",
  columns: {
    AreaCode: "The identifier of a parking zone with city_code-number_with_0_padding, representing the specific parking area.",
    NTickets: "The number of tickets generated during the given hour, indicating parking demand.",
    TimeStart1H: "The datetime of the data, truncated to the start of each hour, used for temporal analysis.",
    Capacity: "The maximum number of parking slots that the area has, defining the potential supply.",
    CityCode: "The code identifying the city the zone belongs to, used for geographical segmentation.",
    AvailableSpots: "The number of available parking spots, computed as the maximum difference between Capacity and NTickets, ensuring a non-negative result.",
    Hour: "Extracted hour from TimeStart1H, used for hourly trend analysis.",
    WeekDay: "Extracted day of the week from TimeStart1H, indicating the weekday for further temporal segmentation.",
    is_mon: "Boolean flag indicating whether the record corresponds to a Monday, useful for modeling weekly patterns.",
    is_tue: "Boolean flag for Tuesday records.",
    is_wed: "Boolean flag for Wednesday records.",
    is_thu: "Boolean flag for Thursday records.",
    is_fri: "Boolean flag for Friday records.",
    is_sat: "Boolean flag for Saturday records.",
    is_sun: "Boolean flag for Sunday records.",
    Seconds: "UNIX timestamp of TimeStart1H, facilitating time series analysis.",
    AverageTicketsPastDay: "Average number of tickets in the past day, providing short-term demand trends.",
    AverageTicketsPastWeek: "Average tickets issued in the past week, offering insights into weekly demand fluctuations.",
    AverageTicketsPastMonth: "Monthly average of tickets, illustrating long-term demand patterns.",
    AverageTicketsPerHour: "Average number of tickets for each hour, across all days, highlighting hourly demand.",
    STDTicketsPerHour: "Standard deviation of tickets per hour, measuring hourly demand variability.",
    AverageTicketsPerDay: "Daily average ticket count, reflecting day-to-day demand trends.",
    STDTicketsPerDay: "Standard deviation of daily tickets, indicating variability in daily demand.",
    AverageTicketsPerDayHour: "Average ticket count per day and hour, providing detailed temporal demand insights.",
    STDTicketsPerDayHour: "Standard deviation of tickets per day and hour, assessing variability in detailed temporal demand.",
    MedTicketsPerDayHour: "Median of tickets per specific day and hour, offering a robust measure of central tendency for demand.",
    MedTicketsPerDay: "Median ticket count per day, reflecting central demand trends on a daily basis.",
    MedTicketsPerHour: "Median of tickets for each hour, highlighting central hourly demand trends."
  }
}


WITH ticket_count AS (
  SELECT AreaCode, SUM(NTickets)
  FROM ${ref("demand")}
  GROUP BY AreaCode
),
valid_zones AS (
  SELECT AreaCode FROM ticket_count
  -- WHERE NTickets > 50
)

SELECT
  AreaCode,
  NTickets,
  TimeStart1H,
  Capacity,
  CityCode,
  AvailableSpots,
  EXTRACT(HOUR FROM TimeStart1H) as Hour,
  EXTRACT(DAYOFWEEK FROM TimeStart1H) as WeekDay,
  CASE WHEN EXTRACT(DAYOFWEEK FROM TimeStart1H) = 2 THEN 1 ELSE 0 END as is_mon,
  CASE WHEN EXTRACT(DAYOFWEEK FROM TimeStart1H) = 3 THEN 1 ELSE 0 END as is_tue,
  CASE WHEN EXTRACT(DAYOFWEEK FROM TimeStart1H) = 4 THEN 1 ELSE 0 END as is_wed,
  CASE WHEN EXTRACT(DAYOFWEEK FROM TimeStart1H) = 5 THEN 1 ELSE 0 END as is_thu,
  CASE WHEN EXTRACT(DAYOFWEEK FROM TimeStart1H) = 6 THEN 1 ELSE 0 END as is_fri,
  CASE WHEN EXTRACT(DAYOFWEEK FROM TimeStart1H) = 7 THEN 1 ELSE 0 END as is_sat,
  CASE WHEN EXTRACT(DAYOFWEEK FROM TimeStart1H) = 1 THEN 1 ELSE 0 END as is_sun,
  UNIX_SECONDS(TimeStart1H) as Seconds,
  AVG(NTickets) OVER (
    PARTITION BY AreaCode
    ORDER BY UNIX_SECONDS(TimeStart1H)
    RANGE BETWEEN (86400) PRECEDING AND 0 PRECEDING -- one day ago (seconds)
  ) as AverageTicketsPastDay,
  AVG(NTickets) OVER (
    PARTITION BY AreaCode
    ORDER BY UNIX_SECONDS(TimeStart1H)
    RANGE BETWEEN (604800) PRECEDING AND 0 PRECEDING -- one week ago
  ) as AverageTicketsPastWeek,
  AVG(NTickets) OVER (
    PARTITION BY AreaCode
    ORDER BY UNIX_SECONDS(TimeStart1H)
    RANGE BETWEEN (2592000) PRECEDING AND 0 PRECEDING -- one month ago
  ) as AverageTicketsPastMonth,
  AVG(NTickets) OVER (
    PARTITION BY AreaCode, EXTRACT(HOUR FROM TimeStart1H)
  ) as AverageTicketsPerHour,
  STDDEV(NTickets) OVER (
    PARTITION BY AreaCode, EXTRACT(HOUR FROM TimeStart1H)
  ) as STDTicketsPerHour,
  AVG(NTickets) OVER (
    PARTITION BY AreaCode, EXTRACT(DAYOFWEEK FROM TimeStart1H)
  ) as AverageTicketsPerDay,
  STDDEV(NTickets) OVER (
    PARTITION BY AreaCode, EXTRACT(DAYOFWEEK FROM TimeStart1H)
  ) as STDTicketsPerDay,
  AVG(NTickets) OVER (
    PARTITION BY AreaCode, EXTRACT(DAYOFWEEK FROM TimeStart1H), EXTRACT(HOUR FROM TimeStart1H)
  ) as AverageTicketsPerDayHour,
  STDDEV(NTickets) OVER (
    PARTITION BY AreaCode, EXTRACT(DAYOFWEEK FROM TimeStart1H), EXTRACT(HOUR FROM TimeStart1H)
  ) as STDTicketsPerDayHour,
  PERCENTILE_CONT(NTickets, 0.5) OVER (
    PARTITION BY AreaCode, EXTRACT(DAYOFWEEK FROM TimeStart1H), EXTRACT(HOUR FROM TimeStart1H)
  ) as MedTicketsPerDayHour,
  PERCENTILE_CONT(NTickets, 0.5) OVER (
    PARTITION BY AreaCode, EXTRACT(DAYOFWEEK FROM TimeStart1H)
  ) as MedTicketsPerDay,
  PERCENTILE_CONT(NTickets, 0.5) OVER (
    PARTITION BY AreaCode, EXTRACT(HOUR FROM TimeStart1H)
  ) as MedTicketsPerHour,

FROM
  ${ref("demand")} demand
WHERE EXISTS (
  SELECT 1 FROM valid_zones zones
  WHERE demand.AreaCode = zones.AreaCode
)
